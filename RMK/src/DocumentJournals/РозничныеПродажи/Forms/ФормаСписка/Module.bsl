
&НаКлиенте
Процедура Рмк_ЗакрытьКассовуюСменуВместо(Команда)
	ДокументыОтчетаРознПродаж = СформироватьОтчетыОРозничныхПродажах(Организация, Касса)
КонецПроцедуры


Функция ЕстьПравоПриемРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийПКО.РозничнаяВыручка));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции

Функция ЕстьПравоВозвратРозничнойВыручки(Организация)
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЕстьПравоПриемРозничнойВыручки = Ложь;
	ИначеЕсли Пользователи.ЭтоПолноправныйПользователь() ИЛИ НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		ЕстьПравоПриемРозничнойВыручки = Истина;
	Иначе
		НачатьТранзакцию();
		Попытка
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(Новый Структура("Организация, ВидОперации", Организация, Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю));
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЕстьПравоПриемРозничнойВыручки = Истина;
		Исключение
			ЕстьПравоПриемРозничнойВыручки = Ложь;
		КонецПопытки;
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат ЕстьПравоПриемРозничнойВыручки;
КонецФункции


Функция ТекстЗапросаНезакрытыеЧеки(СписокТаблиц)
	СписокТаблиц.Вставить("ВТ_РозничныеЧекиКПогашению",		СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Продажи",						СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ВТ_Возвраты",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаЧеки",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаДокументы",				СписокТаблиц.Количество());
	
	СписокТаблиц.Вставить("ТаблицаТовары",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвраты",				СписокТаблиц.Количество());
	
	СписокТаблиц.Вставить("ТаблицаУслуги",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратУслуг",			СписокТаблиц.Количество());
	
	СписокТаблиц.Вставить("ТаблицаПодарочныеСертификаты",	СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаОплаты",					СписокТаблиц.Количество());
	СписокТаблиц.Вставить("ТаблицаВозвратОплаты",			СписокТаблиц.Количество());

	ТекстыЗапроса = Новый Массив;
	
	// ВременнаяТаблица РозничныеЧекиКПогашению
	// Выбираются все проведенные Чеки по подключенному устройству
	// и ранее не закрытые в ОРП.     
	Если  ЗначениеЗаполнено(ДатаДок) Тогда
		ФлтДаты = " И РозничнаяПродажа.Дата >= &ДатаНач И РозничнаяПродажа.Дата <= &ДатаКон ";
	Иначе
		ФлтДаты = " ";
	КонецЕсли;
	
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничнаяПродажа.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.Организация КАК Организация,
		|	РозничнаяПродажа.Склад КАК Склад,
		|	РозничнаяПродажа.Касса КАК Касса,
		|	РозничнаяПродажа.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РозничнаяПродажа.ВидОплаты КАК ВидОплаты,
		|	РозничнаяПродажа.СуммаОплаты КАК СуммаОплаты,
		|	РозничнаяПродажа.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРозничнаяПродажа.Возврат) КАК ЭтоВозврат,
		|	ЕСТЬNULL(РозничнаяПродажа.ДокументОснование.ОтчетОРозничныхПродажах, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка) КАК ЭтоВозвратЗакрытогоПериода
		|ПОМЕСТИТЬ ВТ_РозничныеЧекиКПогашению
		|ИЗ
		|	Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|ГДЕ
		|	РозничнаяПродажа.ОтчетОРозничныхПродажах = ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И РозничнаяПродажа.Касса = &Касса
		|	И РозничнаяПродажа.Проведен
		|	И РозничнаяПродажа.Организация = &Организация " + ФлтДаты + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ЭтоВозврат";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// ВременнаяТаблица Продажи
	// Отсекаются возвраты.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты
		|ПОМЕСТИТЬ ВТ_Продажи
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|ГДЕ
		|	НЕ РозничныеЧекиКПогашению.ЭтоВозврат";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// ВременнаяТаблица Возвраты
	// Отсекаются продажи.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничнаяПродажа.ДокументОснование КАК ДокументОснование,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты,
		|	РозничнаяПродажа.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТ_Возвраты
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК РозничнаяПродажа
		|		ПО РозничныеЧекиКПогашению.Ссылка = РозничнаяПродажа.Ссылка
		|ГДЕ
		|	РозничныеЧекиКПогашению.ЭтоВозврат";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица чеки.
	// По этой таблице производим обход чеков для заполнения реквизита ОтчетОРозничныхПродажах.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК РозничнаяПродажа,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Ссылка,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Касса";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Документы.
	// Группируем все чеки в разрезе Организация, Склад, Касса
	// для формирования ОРП.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	НЕОПРЕДЕЛЕНО КАК ОтчетОРозничныхПродажах
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Касса";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Товары
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПродажи.Организация КАК Организация,
		|	ВременнаяТаблицаПродажи.Склад КАК Склад,
		|	ВременнаяТаблицаПродажи.Касса КАК Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаТовары.Всего) КАК Всего,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	ТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаТовары.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаТовары.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Продажи КАК ВременнаяТаблицаПродажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО ВременнаяТаблицаПродажи.Ссылка = ТаблицаТовары.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.СтатьяРасходов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.СтатьяДоходов,
		|	ТаблицаТовары.СчетСебестоимости,
		|	ТаблицаТовары.СтавкаНСП,
		|	ВременнаяТаблицаПродажи.Склад,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.ВидДеятельности,
		|	ВременнаяТаблицаПродажи.Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет,
		|	ТаблицаТовары.СчетДоходов,
		|	ВременнаяТаблицаПродажи.Организация,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Возвраты (Товары)
	// Определяем Дату реализации 
	// (далее по этой дате будет определена Сделка и произведен контроль перерасхода возврата).
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаТовары.Ссылка.НомерЧекаККМ КАК НомерФискальногоЧека,
		|	ВЫБОР
		|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
		|			ТОГДА &ДатаДокумента
		|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ДатаРеализации,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Цена КАК Цена,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаТовары.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаТовары.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаТовары.Всего) КАК Всего,
		|	ТаблицаТовары.СчетУчета КАК СчетУчета,
		|	ТаблицаТовары.СчетДоходов КАК СчетДоходов,
		|	ТаблицаТовары.СчетСебестоимости КАК СчетСебестоимости,
		|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаТовары.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаТовары.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Товары КАК ТаблицаТовары
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаТовары.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа КАК ОснованиеВозврата
		|		ПО РозничныеЧекиКПогашению.ДокументОснование = ОснованиеВозврата.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Продажи КАК ПродажиТекущейСмены
		|		ПО РозничныеЧекиКПогашению.ДокументОснование = ПродажиТекущейСмены.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НЕ ПродажиТекущейСмены.Ссылка ЕСТЬ NULL
		|			ТОГДА &ДатаДокумента
		|		ИНАЧЕ ЕСТЬNULL(ОснованиеВозврата.ОтчетОРозничныхПродажах.Дата, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ,
		|	ТаблицаТовары.СчетСебестоимости,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация,
		|	ТаблицаТовары.ВидДеятельности,
		|	ТаблицаТовары.СчетУчета,
		|	ТаблицаТовары.СчетДоходов,
		|	ТаблицаТовары.СтатьяРасходов,
		|	ТаблицаТовары.СтавкаНСП,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.СтатьяДоходов,
		|	ТаблицаТовары.СтавкаНДС,
		|	ТаблицаТовары.Ссылка.НомерЧекаККМ,
		|	ТаблицаТовары.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаТовары.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Услуги
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВременнаяТаблицаПродажи.Организация КАК Организация,
		|	ВременнаяТаблицаПродажи.Склад КАК Склад,
		|	ВременнаяТаблицаПродажи.Касса КАК Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	СУММА(ТаблицаУслуги.Количество) КАК Количество,
		|	СУММА(ТаблицаУслуги.Сумма) КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаУслуги.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаУслуги.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаУслуги.Всего) КАК Всего,
		|	ТаблицаУслуги.СчетДоходов КАК СчетДоходов,
		|	ТаблицаУслуги.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаУслуги.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Продажи КАК ВременнаяТаблицаПродажи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Услуги КАК ТаблицаУслуги
		|		ПО ВременнаяТаблицаПродажи.Ссылка = ТаблицаУслуги.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаУслуги.СтавкаНДС,
		|	ВременнаяТаблицаПродажи.Организация,
		|	ТаблицаУслуги.Номенклатура,
		|	ВременнаяТаблицаПродажи.Склад,
		|	ВременнаяТаблицаПродажи.Касса,
		|	ВременнаяТаблицаПродажи.БезналичныйРасчет,
		|	ТаблицаУслуги.СтавкаНСП,
		|	ТаблицаУслуги.СтатьяДоходов,
		|	ТаблицаУслуги.ВидДеятельности,
		|	ТаблицаУслуги.СчетДоходов,
		|	ТаблицаУслуги.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаУслуги.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Возврат услуг
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет КАК БезналичныйРасчет,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Цена КАК Цена,
		|	СУММА(ТаблицаУслуги.Количество) КАК Количество,
		|	СУММА(ТаблицаУслуги.Сумма) КАК Сумма,
		|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаУслуги.СтавкаНСП КАК СтавкаНСП,
		|	СУММА(ТаблицаУслуги.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ТаблицаУслуги.СуммаНСП) КАК СуммаНСП,
		|	СУММА(ТаблицаУслуги.Всего) КАК Всего,
		|	ТаблицаУслуги.СчетДоходов КАК СчетДоходов,
		|	ТаблицаУслуги.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаУслуги.ВидДеятельности КАК ВидДеятельности
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.Услуги КАК ТаблицаУслуги
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаУслуги.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Организация,
		|	ТаблицаУслуги.ВидДеятельности,
		|	ТаблицаУслуги.СчетДоходов,
		|	ТаблицаУслуги.СтавкаНСП,
		|	РозничныеЧекиКПогашению.Касса,
		|	РозничныеЧекиКПогашению.БезналичныйРасчет,
		|	ТаблицаУслуги.Номенклатура,
		|	ТаблицаУслуги.СтатьяДоходов,
		|	ТаблицаУслуги.СтавкаНДС,
		|	ТаблицаУслуги.Цена
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаУслуги.Количество) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Сумма) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНДС) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.СуммаНСП) <> 0
		|		ИЛИ СУММА(ТаблицаУслуги.Всего) <> 0)";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица ПодарочныеСертификаты
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	ТаблицаПодарочныеСертификаты.ВидОплаты КАК ВидОплаты,
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма * ВЫБОР
		|			КОГДА РозничныеЧекиКПогашению.ЭтоВозврат
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Сумма
		|ИЗ
		|	ВТ_РозничныеЧекиКПогашению КАК РозничныеЧекиКПогашению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РозничнаяПродажа.ПодарочныеСертификаты КАК ТаблицаПодарочныеСертификаты
		|		ПО РозничныеЧекиКПогашению.Ссылка = ТаблицаПодарочныеСертификаты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПодарочныеСертификаты.ВидОплаты,
		|	РозничныеЧекиКПогашению.Организация,
		|	РозничныеЧекиКПогашению.Склад,
		|	РозничныеЧекиКПогашению.Касса
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаПодарочныеСертификаты.Сумма) <> 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	// Таблица Оплаты (безнал)
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты
		|ИЗ
		|	ВТ_Продажи КАК РозничныеЧекиКПогашению
		|ГДЕ
		|	РозничныеЧекиКПогашению.БезналичныйРасчет
		|	И РозничныеЧекиКПогашению.СуммаОплаты <> 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);

	// Таблица Возврат оплат (безнал).
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РозничныеЧекиКПогашению.Ссылка КАК Ссылка,
		|	РозничныеЧекиКПогашению.Организация КАК Организация,
		|	РозничныеЧекиКПогашению.Склад КАК Склад,
		|	РозничныеЧекиКПогашению.Касса КАК Касса,
		|	РозничныеЧекиКПогашению.ВидОплаты КАК ВидОплаты,
		|	РозничныеЧекиКПогашению.СуммаОплаты КАК СуммаОплаты
		|ИЗ
		|	ВТ_Возвраты КАК РозничныеЧекиКПогашению
		|ГДЕ
		|	РозничныеЧекиКПогашению.БезналичныйРасчет
		|	И РозничныеЧекиКПогашению.СуммаОплаты <> 0";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Функция СформироватьОтчетыОРозничныхПродажах(Организация, Касса)    
		Запрос = Новый Запрос;
	
	ДанныеРозничныхПродаж = Новый Структура;
	
	//ДатаДокумента = ОбщегоНазначения.ТекущаяДатаПользователя();
	ДатаДокумента = ТекущаяДатаСеанса();
	
	Запрос.Текст = ТекстЗапросаНезакрытыеЧеки(ДанныеРозничныхПродаж);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Касса", Касса);
	Если  ЗначениеЗаполнено(ДатаДок) Тогда
		 Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаДок)); 
		 Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаДок));
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПараметрыЗаполнения = Новый Структура;
	Для Каждого КлючИЗначение Из ДанныеРозничныхПродаж Цикл
		ПараметрыЗаполнения.Вставить(КлючИЗначение.Ключ, РезультатЗапроса[КлючИЗначение.Значение].Выгрузить());
	КонецЦикла; 
	
	ДанныеЗаполнения = Новый Структура("Организация, Склад, Касса");
	
	ЕстьПравоПриемРозничнойВыручки = ЕстьПравоПриемРозничнойВыручки(Организация);
	ЕстьПравоВозвратРозничнойВыручки = ЕстьПравоВозвратРозничнойВыручки(Организация);
	
	ТаблицаВозвратОплаты = ПараметрыЗаполнения.ТаблицаВозвратОплаты;
	ТаблицаОплаты        = ПараметрыЗаполнения.ТаблицаОплаты;
	
	ТаблицаВозвратОплаты.Свернуть("Организация, Склад, ВидОплаты, Касса", "СуммаОплаты");
	ТаблицаОплаты.Свернуть("Организация, Склад, ВидОплаты, Касса", "СуммаОплаты");
	
	ДокументыКПроведению = Новый Массив;	
	
	НачатьТранзакцию();	
	
	Для Каждого СтрокаДокументы Из ПараметрыЗаполнения.ТаблицаДокументы Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаДокументы);
		
		ПараметрыРозничнойПродажи = КассовыеСменыВызовСервераБП.ПараметрыРозничныхПродаж(Организация, ДанныеЗаполнения.Касса);
		СчетаУчета = БухгалтерскийУчетВызовСервера.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ПараметрыРозничнойПродажи.Контрагент, ПараметрыРозничнойПродажи.ДоговорКонтрагента);
		СчетаУчета.Вставить("СчетРасчетовДт", СчетаУчета.СчетРасчетовПокупателя);
		СчетаУчета.Вставить("СчетРасчетовКт", СчетаУчета.СчетРасчетовПокупателя.ПарныйСчет);
		
		ТоварыПоДокументу = ПараметрыЗаполнения.ТаблицаТовары.Скопировать(ДанныеЗаполнения);
		ВозвратыПоДокументу = ПараметрыЗаполнения.ТаблицаВозвраты.Скопировать(ДанныеЗаполнения);
		
		УслугиПоДокументу = ПараметрыЗаполнения.ТаблицаУслуги.Скопировать(ДанныеЗаполнения);
		ВозвратУслугПоДокументу = ПараметрыЗаполнения.ТаблицаВозвратУслуг.Скопировать(ДанныеЗаполнения);
		
		ПодарочныеСертификатыПоДокументу = ПараметрыЗаполнения.ТаблицаПодарочныеСертификаты.Скопировать(ДанныеЗаполнения);
		ОплатаПоДокументу = ТаблицаОплаты.Скопировать(ДанныеЗаполнения);
		ВозвратыОплат = ТаблицаВозвратОплаты.Скопировать(ДанныеЗаполнения);
		
		// Не создаем документ, если все его табличные части будут пустыми.
		Если ТоварыПоДокументу.Количество() = 0
			И ВозвратыПоДокументу.Количество() = 0
			
			И УслугиПоДокументу.Количество() = 0
			И ВозвратУслугПоДокументу.Количество() = 0
			
			И ПодарочныеСертификатыПоДокументу.Количество() = 0 
			И ОплатаПоДокументу.Количество() = 0 Тогда
			
			Продолжить;
		КонецЕсли;
		
		//Для Каждого СтрокаТовары Из ТоварыПоДокументу Цикл
		//	Если Не СтрокаТовары.СуммаВключаетНалоги Тогда
		//		СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС + СтрокаТовары.СуммаНСП;
		//		СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
		//	КонецЕсли; 
		//КонецЦикла;
		//
		//Для Каждого СтрокаТовары Из ВозвратыПоДокументу Цикл
		//	Если Не СтрокаТовары.СуммаВключаетНалоги Тогда
		//		СтрокаТовары.Сумма = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС + СтрокаТовары.СуммаНСП;
		//		СтрокаТовары.Цена  = ?(СтрокаТовары.Количество <> 0, СтрокаТовары.Сумма/СтрокаТовары.Количество, 0);
		//	КонецЕсли; 
		//КонецЦикла;
		
		ОтчетОРозничныхПродажах = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОтчетОРозничныхПродажах.Дата = ДатаДокумента;
		//ОтчетОРозничныхПродажах.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
		ДанныеЗаполненияДокумента = Новый Структура;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполненияДокумента, ДанныеЗаполнения);
		ОтчетОРозничныхПродажах.Заполнить(ДанныеЗаполненияДокумента);
		
		ОтчетОРозничныхПродажах.Контрагент = ПараметрыРозничнойПродажи.Контрагент;
		ОтчетОРозничныхПродажах.ДоговорКонтрагента = ПараметрыРозничнойПродажи.ДоговорКонтрагента;
		ОтчетОРозничныхПродажах.СтатьяДвиженияДенежныхСредств = ПараметрыРозничнойПродажи.СтатьяДвиженияДенежныхСредств;
		
		ОтчетОРозничныхПродажах.СчетРасчетовДт = СчетаУчета.СчетРасчетовДт;
		ОтчетОРозничныхПродажах.СчетРасчетовКт = СчетаУчета.СчетРасчетовКт;

		// Заполнение табличных частей.		
		ОтчетОРозничныхПродажах.Товары.Загрузить(ТоварыПоДокументу);
		ОтчетОРозничныхПродажах.Возвраты.Загрузить(ВозвратыПоДокументу);
		
		ОтчетОРозничныхПродажах.Услуги.Загрузить(УслугиПоДокументу);
		ОтчетОРозничныхПродажах.ВозвратУслуг.Загрузить(ВозвратУслугПоДокументу);
		
		ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Загрузить(ПодарочныеСертификатыПоДокументу);
		ОтчетОРозничныхПродажах.Оплата.Загрузить(ОплатаПоДокументу);
		ОтчетОРозничныхПродажах.ВозвратОплаты.Загрузить(ВозвратыОплат);
		
		ОтчетОРозничныхПродажах.Комментарий = НСтр("ru = 'Создан автоматически закрытием кассовой смены'");
		
		ОтчетОРозничныхПродажах.ДополнительныеСвойства.Вставить("ЗаполнитьСчетаУчетаПередЗаписью", Истина);
		
		ОтчетОРозничныхПродажах.Записать(РежимЗаписиДокумента.Запись);
		ДокументыКПроведению.Добавить(ОтчетОРозничныхПродажах.Ссылка);
		
		СуммаПродаж = ОтчетОРозничныхПродажах.Товары.Итог("Всего") 
			+ ОтчетОРозничныхПродажах.Услуги.Итог("Всего") 
			+ ОтчетОРозничныхПродажах.ПодарочныеСертификаты.Итог("Сумма");
			
		// Если есть продажи оплаченные наличными
		Если ОтчетОРозничныхПродажах.Оплата.Итог("СуммаОплаты") < СуммаПродаж
			И ЕстьПравоПриемРозничнойВыручки Тогда
			ПриходныйОрдер = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ПриходныйОрдер.Дата = ДатаДокумента;
			ПриходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			Если ПриходныйОрдер.СуммаДокумента > 0 Тогда 
				ПриходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
				ДокументыКПроведению.Добавить(ПриходныйОрдер.Ссылка);
			КонецЕсли;	
		КонецЕсли;
		
		// Если есть возвраты оплаченные наличными
		Если ОтчетОРозничныхПродажах.ВозвратОплаты.Итог("СуммаОплаты") < ОтчетОРозничныхПродажах.Возвраты.Итог("Всего") + ОтчетОРозничныхПродажах.ВозвратУслуг.Итог("Всего")
			И ЕстьПравоВозвратРозничнойВыручки Тогда
			РасходныйОрдер = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			РасходныйОрдер.Дата = ДатаДокумента;
			РасходныйОрдер.Заполнить(ОтчетОРозничныхПродажах.Ссылка);
			Если РасходныйОрдер.СуммаДокумента > 0  Тогда 
				РасходныйОрдер.Записать(РежимЗаписиДокумента.Запись);
				ДокументыКПроведению.Добавить(РасходныйОрдер.Ссылка);
			КонецЕсли;	
		КонецЕсли;
		
		СтрокаДокументы.ОтчетОРозничныхПродажах = ОтчетОРозничныхПродажах.Ссылка;
		
	КонецЦикла;
	
	Для Каждого СтрокаПоЧеку Из ПараметрыЗаполнения.ТаблицаЧеки Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СтрокаПоЧеку);
		
		НайденныеСтроки = ПараметрыЗаполнения.ТаблицаДокументы.НайтиСтроки(ДанныеЗаполнения);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			ДокументОбъект = СтрокаПоЧеку.РозничнаяПродажа.ПолучитьОбъект();
			ДокументОбъект.ОтчетОРозничныхПродажах = НайденныеСтроки[0].ОтчетОРозничныхПродажах;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ПровестиДокументы(ДокументыКПроведению);
	
	Возврат ПараметрыЗаполнения.ТаблицаДокументы.ВыгрузитьКолонку("ОтчетОРозничныхПродажах");

КонецФункции


// Выполняет попытку проведения документов.
//
// Параметры:
//  ДокументыКПроведению - Массив - документы, которые необходимо провести.
//
Процедура ПровестиДокументы(ДокументыКПроведению)
	
	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(ДокументыКПроведению);
	Для Каждого РезультатПроведения Из НепроведенныеДокументы Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не проведен документ %1: %2'"),
			Строка(РезультатПроведения.Ссылка), РезультатПроведения.ОписаниеОшибки),
			РезультатПроведения.Ссылка, "Объект");
	КонецЦикла;
	
КонецПроцедуры
