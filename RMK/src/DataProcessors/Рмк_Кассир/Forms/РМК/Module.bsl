
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.Дата = ТекущаяДата();
	Кассир = Справочники.ВидыОтветственныхЛиц.НайтиПоНаименованию("Кассир");
	Объект.Автор = ПараметрыСеанса.АвторизованныйПользователь;
	Объект.ФизЛицо = Объект.Автор.ФизическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Организация КАК Организация,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Касса КАК Касса
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&Дата,
		|			ФизЛицо = &ФЛ
		|				И Период <= &Дата
		|				И ОтветственноеЛицо = &Кассир
		|				) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Кассир", Кассир);
	Запрос.УстановитьПараметр("ФЛ", Объект.ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Объект.КолЗаписейФЛ = ВыборкаДетальныеЗаписи.Количество();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Объект.Организация = ВыборкаДетальныеЗаписи.Организация;
			Объект.Касса = ВыборкаДетальныеЗаписи.Касса;
		КонецЦикла;
	
   // Установка реквизитов формы.	
	ДатаДокумента = Объект.Дата;
	
	ДанныеУчетнойПолитики = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьДанныеУчетнойПолитикиОрганизаций(ДатаДокумента, Объект.Организация);
	
	ПараметрыРозничнойПродажи = КассовыеСменыВызовСервераБП.ПараметрыРозничныхПродаж(Объект.Организация, Объект.Касса);
	СтавкаНДС = ?(ДанныеУчетнойПолитики.ПлательщикНДС, ПараметрыРозничнойПродажи.ДоговорКонтрагента.СтавкаНДС, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	
	ИспользоватьОплатуПоПлатежнымКартам = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПоПлатежнымКартам");
	Элементы.БезналичныйРасчет.Видимость = ИспользоватьОплатуПоПлатежнымКартам;
	Элементы.ВидОплаты.Видимость = ИспользоватьОплатуПоПлатежнымКартам;
	УстановитьФункциональныеОпцииФормы();

	//БухгалтерскийУчетКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаДополнительно, Объект.Комментарий);
	
	УказыватьТочностьЦены = ПолучитьФункциональнуюОпцию("УказыватьТочностьЦены");
	Если УказыватьТочностьЦены Тогда 
		ЗаполнитьСписокВыбораТочностьЦены();	
	КонецЕсли;
	
	//Если Параметры.Ключ.Пустая() Тогда
	//	РозничнаяПродажаСсылка = Документы.РозничнаяПродажа.ПолучитьСсылку();
	//Иначе
	//	РозничнаяПродажаСсылка = Объект.Ссылка;
	//КонецЕсли; 
	
	// Маркировка
	ВестиУчетМаркировкиПродукции = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукции");
	Если ВестиУчетМаркировкиПродукции Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	// Конец Маркировка
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьПодключаемоеОборудование();
	Если ИспользоватьПодключаемоеОборудование Тогда
		ИспользуетсяФискальныйРегистратор = ПодключаемоеОборудованиеБППовтИсп.ИспользоватьФискальныйРегистратор();
		УправлениеКассовойСменойДоступно = КассовыеСменыВызовСервераБП.ДоступноУправлениеКассовойСменой();
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Установить видимость и доступность элементов формы
	//УстановитьВидимостьДоступностьЭлементов();
	Если  ИспользуетсяФискальныйРегистратор Тогда
		Элементы.ГруппаБаннерОткрытьСмену.Видимость = Истина;
	Иначе
		Элементы.ГруппаБаннерОткрытьСмену.Видимость = Ложь;  
	КонецЕсли;
	
	Элементы.ИмяКассира.Заголовок = Объект.ФизЛицо; 
	ИтогДата = Объект.Дата; 
	ИтогВремя = Объект.Дата;  
	
	Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;
	Объект.СуммаВключаетНалоги = Истина;  
	ОбновитьФорму();
КонецПроцедуры

// Процедура устанавливает функциональные опции формы документа.
//
&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма, Объект.Организация, ДатаДокумента);
КонецПроцедуры

// Процедура заполняет список выбора Точность цены
//
&НаСервере
Процедура ЗаполнитьСписокВыбораТочностьЦены()

	Элементы.ТочностьЦены.СписокВыбора.Очистить();

	ЗначенияТочностиЦены = Ценообразование.ЗначенияТочностиЦены();
	Для Каждого ЗначениеТочностиЦены Из ЗначенияТочностиЦены Цикл 
		Элементы.ТочностьЦены.СписокВыбора.Добавить(ЗначениеТочностиЦены.Значение, ЗначениеТочностиЦены.Представление);
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьСписокВыбораТочностьЦены()

// Маркировка
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексМарки(ТекущаяСтрока)
	Если ЭтоМаркированнаяПродукция(ТекущаяСтрока.Номенклатура) Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.КодМаркировки) Тогда
			ТекущаяСтрока.ИндексМарки = 1;
		Иначе
			ТекущаяСтрока.ИндексМарки = 2;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.ИндексМарки = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДействий(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		Действия = Новый Массив;
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам);
		Действия.Добавить(Перечисления.ДействияГрупповогоИзмененияСтрок.УдалитьСтроки);
		
		//Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Очистить();
		//Для каждого Действие Из Действия Цикл
		//	ДействиеОписание = ГрупповоеИзменениеСтрокСервер.ПредставлениеДействия(Действие);
		//	Элементы.ИзменениеСтрокТоварыДействие.СписокВыбора.Добавить(Действие, ДействиеОписание);
		//КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры     

 &НаСервереБезКонтекста
Функция ЭтоМаркированнаяПродукция(Номенклатура)
	Возврат Номенклатура.ЭтоМаркированнаяПродукция;
КонецФункции // ЭтоМаркированнаяПродукция()

&НаСервере
Функция ПолучитьДанныеПоРознице()       
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыРозничныхПродаж.Склад КАК Склад,
		|	ПараметрыРозничныхПродаж.Контрагент КАК Контрагент,
		|	ПараметрыРозничныхПродаж.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ПараметрыРозничныхПродаж.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	РегистрСведений.ПараметрыРозничныхПродаж КАК ПараметрыРозничныхПродаж
		|ГДЕ
		|	ПараметрыРозничныхПродаж.Организация = &Организация
		|	И ПараметрыРозничныхПродаж.Касса = &Касса";
	
	Запрос.УстановитьПараметр("Касса", Объект.Касса);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СтруктДанныхОрг = Новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		СтруктДанныхОрг.Вставить("Склад",ВыборкаДетальныеЗаписи.Склад);
		
	КонецЦикла;     
	Объект.ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("417");
	Возврат  СтруктДанныхОрг;
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.КолЗаписейФЛ > 1 Тогда
		СообщитьНеуникальность(); 
	ИначеЕсли Объект.КолЗаписейФЛ = 0 Тогда 
		СообщитьОтсутствие();
	КонецЕсли;   
	
	СтруктОрг = ПолучитьДанныеПоРознице() ;
	
      Объект.Склад = СтруктОрг.Склад;  
	
	Элементы.СуммаДокумента.ЦветТекста = Новый Цвет(0, 0, 0);
	Элементы.СуммаСдача.ЦветФона = Новый Цвет(255, 255, 153);
	//Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа; 
КонецПроцедуры

&НаКлиенте
Процедура СообщитьНеуникальность()
	 Предупреждение("Сотрудник "+Объект.ФизЛицо+" зарегистрирован как кассир у нескольких пользователей или в нескольких организациях!",20,"ВНИМАНИЕ!");
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОтсутствие()
	 Предупреждение("У пользователя "+Объект.Автор+" не зарегистрировано как кассир ни одно физическое лицо!",20,"ВНИМАНИЕ!");	
КонецПроцедуры


Процедура ОбновитьСуммаОплаты()
	//Если ТекОплата = "" Тогда
	//	СуммаОплаты = 0;
	//Иначе
		//СуммаОплаты = Число(ТекОплата);  
		СуммаСдача = СуммаОплаты - СуммаДокумента;
	//КонецЕсли;
КонецПроцедуры
	  
&НаКлиенте
Процедура к1(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 1);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура к2(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 2);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура к3(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 3);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура к4(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 4);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура к5(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 5);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура к6(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 6);
	ОбновитьСуммаОплаты();
КонецПроцедуры
	  
&НаКлиенте
Процедура к7(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 7);
	ОбновитьСуммаОплаты(); 
КонецПроцедуры

&НаКлиенте
Процедура к8(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 8);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура К9(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 9);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура кПоинт(Команда)
	Если СтрНайти(Строка(СуммаОплаты) ,".") Тогда
	Иначе
		СуммаОплаты = Число(Строка(СуммаОплаты) + ",00");
		ОбновитьСуммаОплаты();  
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура К0(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + 0);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура К00(Команда)
	СуммаОплаты = Число(Строка(СуммаОплаты) + "00");
	ОбновитьСуммаОплаты();
КонецПроцедуры



&НаКлиенте
Процедура кОтм(Команда)
	ТекОплата = ЛЕВ(ТекОплата,СтрДлина(ТекОплата) - 1);
	ОбновитьСуммаОплаты();
КонецПроцедуры

&НаКлиенте
Процедура Оплата(Команда)
	с = "ыва";
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	Если Не УправлениеКассовойСменойДоступно Тогда
		ПоказатьПредупреждение( , НСтр("ru='Недостаточно прав для выполнения операции'"));
	Иначе
		ОчиститьСообщения();
		КассовыеСменыКлиентБП.ВыполнитьОперацию(УникальныйИдентификатор, "ОткрытьСмену");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеСтрокТоварыВыполнитьДействие(Команда)
	ОбработатьТаблицу("Товары");
	НастроитьОформлениеПанелиРедактирования("Товары", 4);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформлениеПанелиРедактирования(ИмяТЧ, Состояние, СохранитьИзменения = Неопределено)
	
	Если ИмяТЧ = "Товары" Тогда
		РеквизитЗначение = "ИзменениеСтрокТоварыЗначение";
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		РеквизитЗначение = "ИзменениеСтрокУслугиЗначение";
	КонецЕсли;
	
	Результат = ГрупповоеИзменениеСтрокКлиент.НастроитьОформлениеПанелиРедактирования(
		ЭтотОбъект,
		НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ),
		Состояние,
		ЭтотОбъект[РеквизитЗначение]);
	
	Если Результат.Свойство("УстановитьСвязиПараметровВыбора") И Результат.УстановитьСвязиПараметровВыбора Тогда
		УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаборЭлементовГрупповогоИзмененияСтрокКлиент(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		//НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		//НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		//НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		//НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		//НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		//НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		//НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		//НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		//НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		//НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		//                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
		КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции

&НаСервере
Функция НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Товары");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокТовары);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокТоварыУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокТоварыСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокТоварыВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.ТоварыПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.ТоварыНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокТоварыДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокТоварыЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокТоварыОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокТоварыОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокТоварыОбъектИзмененийЭлемент], Неопределено));
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		
		НаборЭлементов = Новый Структура();
		НаборЭлементов.Вставить("ИмяТЧ", "Услуги");
		НаборЭлементов.Вставить("ДокументСсылка",          Объект.Ссылка);
		НаборЭлементов.Вставить("ПанельРедактирования",    Элементы.ГруппаИзменениеСтрокУслуги);
		НаборЭлементов.Вставить("КнопкаУстановитьФлажки",  Элементы.ИзменениеСтрокУслугиУстановитьФлажки);
		НаборЭлементов.Вставить("КнопкаСнятьФлажки",       Элементы.ИзменениеСтрокУслугиСнятьФлажки);
		НаборЭлементов.Вставить("КнопкаВыполнитьДействие", Элементы.ИзменениеСтрокУслугиВыполнитьДействие);
		НаборЭлементов.Вставить("КолонкаПометка",          Элементы.УслугиПометка);
		НаборЭлементов.Вставить("КолонкаНомерСтроки",      Элементы.УслугиНомерСтроки);
		НаборЭлементов.Вставить("Действие",                ЭтотОбъект.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("ДействиеЭлемент",         Элементы.ИзменениеСтрокУслугиДействие);
		НаборЭлементов.Вставить("Значение",                ЭтотОбъект.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ЗначениеЭлемент",         Элементы.ИзменениеСтрокУслугиЗначение);
		НаборЭлементов.Вставить("ОбъектИзменений",         ИзменениеСтрокУслугиОбъектИзмененийЭлемент);
		НаборЭлементов.Вставить("КолонкаОбъектИзменений",  ?(ЗначениеЗаполнено(ИзменениеСтрокУслугиОбъектИзмененийЭлемент), 
		                                                     Элементы[ИзменениеСтрокУслугиОбъектИзмененийЭлемент], Неопределено));
	КонецЕсли;
	
	Возврат НаборЭлементов;
	
КонецФункции


&НаСервере
Процедура УстановитьСвязиПараметровВыбораДляЗначения(ИмяТЧ)
	
	ГрупповоеИзменениеСтрокСервер.УстановитьСвязиПараметровВыбора(
		НаборЭлементовГрупповогоИзмененияСтрокСервер(ИмяТЧ));
	
КонецПроцедуры


&НаСервере
Процедура ОбработатьТаблицуНаСервере(ИмяТЧ)
	
	Если ИмяТЧ = "Товары" Тогда
		
		ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
			ЭтотОбъект,
			Объект.Товары,
			ИзменениеСтрокТоварыДействие,
			ИзменениеСтрокТоварыОбъектИзмененийРеквизит,
			ИзменениеСтрокТоварыЗначение,
			"ТоварыНоменклатура");
			
	КонецЕсли;	
		
КонецПроцедуры



&НаКлиенте
Процедура ОбработатьТаблицу(ИмяТЧ)
	
	ОбработатьТаблицуНаСервере(ИмяТЧ);
	
	Если ИмяТЧ = "Товары" Тогда

		ИзменяемыеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Пометка", Истина));

		ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТЧ);
		
		Для каждого СтрокаТабличнойЧасти Из ИзменяемыеСтроки Цикл

			Если ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоКоличеству")
				ИЛИ ИзменениеСтрокТоварыДействие = ПредопределенноеЗначение("Перечисление.ДействияГрупповогоИзмененияСтрок.РаспределитьСуммуПоСуммам") Тогда
					
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьЦенуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета,
					?(УказыватьТочностьЦены, Объект.ТочностьЦены, 2));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
				
				ОбновитьПодвалФормы();		
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры  

// Подготовка параметров для расчетов
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - наименование табличной части
//	СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//
// Возвращаемое значение:
//	Структура - разделенные данные URI
//		*Период - Дата - дата документа
//		*Организация - СправочникСсылка.Организации - организация документа
//		*ПризнакСтраныЕАЭС - Булево - признак страны ЕАЭС или нет
//		*ПризнакСтраныИмпортЭкспорт - Булево - признак страны ИмпортЭкспорт или нет
//		*СуммаВключаетНалоги - Булево - сумма включает налоги или нет
//		*БезналичныйРасчет - Булево - признак безначличного расчета
//		*СчитатьОтДохода - Булево - признак того, что расчет необходимо делать от реквизита "Доход"
//		*ИмяТабличнойЧасти - Строка - наименование табличной части
//		*Точность - Булево - точность цены (количество знаков цены после запятой)
//		*СтавкаНДС - СправочникСсылка.СтавкиНДС - ставка НДС
//
&НаСервере
Функция ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, СчитатьОтДохода = Ложь)

	Обработка = РеквизитФормыВЗначение("Объект");
	ПараметрыРасчета = Обработка.ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти, ДанныеУчетнойПолитики, 
						СчитатьОтДохода, УказыватьТочностьЦены);
	
	Возврат ПараметрыРасчета;
КонецФункции

 // Процедура рассчитывает итоги для подвала формы.
//
&НаКлиенте
Процедура ОбновитьПодвалФормы()
	
	ИтогВсего = Объект.Товары.Итог("Всего") + Объект.Услуги.Итог("Всего");
	ИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	ИтогСуммаНСП = Объект.Товары.Итог("СуммаНСП") + Объект.Услуги.Итог("СуммаНСП");
	ИтогСуммыСкидка =  Объект.Товары.Итог("СуммаСкидки");
	
	ИтогСуммаКОплате = ИтогВсего - ИтогСуммыСкидка;
	СуммаДокумента = ИтогСуммаКОплате; 
	
	Попытка
		ТекТовар = "" + Элементы.Товары.ТекущиеДанные.Номенклатура;
		ТекКол     =  "" + Элементы.Товары.ТекущиеДанные.Количество + " Х " +  Элементы.Товары.ТекущиеДанные.Цена + " = " + Элементы.Товары.ТекущиеДанные.Всего;
	Исключение
	КонецПопытки;
КонецПроцедуры // ОбновитьПодвалФормы()

// ПодключаемоеОборудование
&НаКлиенте
Процедура ПоискПоШтрихкодуТовары(Команда)
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
    
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
        ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1), ДополнительныеПараметры.ИмяТабличнойЧасти);
	КонецЕсли;	

КонецПроцедуры 
// Конец ПодключаемоеОборудование

// Процедура - Получены штрихкоды
//
// Параметры:
//  ДанныеШтрихкодов	 - Структура/Массив - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти) Экспорт
	
	Модифицированность = Истина;
	
	НеДобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти);
	
	// Неизвестные штрихкоды.
	Если НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.НеизвестныеШтрихкоды Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Данные по штрихкоду не найдены: %1'"), СтруктураДанные.Штрихкод);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	// Штрихкоды некорректного типа.
	ИначеЕсли НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа.Количество() > 0 Тогда 
		Для Каждого СтруктураДанные Из НеДобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа Цикл 
			СтрокаСообщения = СтрШаблон(НСтр("ru = 'Найденная по штрихкоду %1 номенклатура: ""%2"", не подходит для этой табличной части'"),
				СтруктураДанные.ТекШтрихкод, СтруктураДанные.Номенклатура);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоШтрихкоду(ТекШтрихкод)
	
	Номенклатура = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьНоменклатуруПоШтрихкоду(ТекШтрихкод);
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Номенклатура", Номенклатура);
	СтруктураДанные.Вставить("ТипНоменклатурыУслуга", ?(ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура"), Номенклатура.Услуга, Ложь));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПоШтрихкоду()

// Функция - Заполнить по данным штрихкодов
//
// Параметры:
//  ДанныеШтрихкодов		 - 	 - Структура/Массив	 - В зависимости от точки вызова передается структура (обработка сканера) или массив (обработка ТСД)
//  ИмяТабличнойЧасти	 - Строка	 - Имя табличной части для загрузки
// 
// Возвращаемое значение:
//  Структура - Массивы неизвестных штрих кодов
//
&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрихкодов, ИмяТабличнойЧасти) 
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	Для каждого ТекШтрихкод Из МассивШтрихкодов Цикл
		СтруктураДанные = ПолучитьДанныеПоШтрихкоду(ТекШтрихкод);
		
		Если НЕ ЗначениеЗаполнено(СтруктураДанные.Номенклатура) Тогда 
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли ИмяТабличнойЧасти = "Товары"
			И СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		ИначеЕсли ИмяТабличнойЧасти = "Услуги"
			И НЕ СтруктураДанные.ТипНоменклатурыУслуга Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("ТекШтрихкод, Номенклатура", ТекШтрихкод, СтруктураДанные.Номенклатура));
		Иначе 
			СтрНоменклатура = Новый Структура("Номенклатура",СтруктураДанные.Номенклатура);
			НайденнаяСтрока = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтрНоменклатура);
			Если НайденнаяСтрока = Неопределено Тогда    
			ИначеЕсли НайденнаяСтрока.Количество() = 0 Тогда
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
				СтрокаТабличнойЧасти.Номенклатура = СтруктураДанные.Номенклатура;
				СтрокаТабличнойЧасти.Количество = ТекШтрихкод.Количество;
				Если ИмяТабличнойЧасти = "Товары" Тогда 				
					// Маркировка
					Если ВестиУчетМаркировкиПродукции Тогда 
						ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
					КонецЕсли;	
					// Конец Маркировка
				КонецЕсли;	
			Иначе
				СтрокаТабличнойЧасти  = Объект[ИмяТабличнойЧасти].Получить(НайденнаяСтрока[0].НомерСтроки-1);
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
			КонецЕсли; 
			ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",
		НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);

КонецФункции // ЗаполнитьПоДаннымШтрихкодов()
// Конец ПодключаемоеОборудование

&НаКлиенте
Процедура ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	СтавкаНСП = ?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги);
		
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Дата", ДатаДокумента);
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("Склад", Объект.Склад);
	СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
	СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
	СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);

	// Заполнение по данным номенклатуры
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.Цена;
	СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
	СтрокаТабличнойЧасти.СтатьяДоходов = СтруктураДанные.СтатьяДоходов;
	СтрокаТабличнойЧасти.Остаток = ПолучитьОстаток(СтрокаТабличнойЧасти.Номенклатура) - ПолучитьПрод(СтрокаТабличнойЧасти.Номенклатура) - СтрокаТабличнойЧасти.Количество;
		
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		СтрокаТабличнойЧасти.СчетУчета = СтруктураДанные.СчетУчета;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасходов;
		СтрокаТабличнойЧасти.СтатьяРасходов = СтруктураДанные.СтатьяРасходов;
		
		// Маркировка
		Если ВестиУчетМаркировкиПродукции Тогда 
			ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
		КонецЕсли;	
		// Конец Маркировка
		
	ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
		СтрокаТабличнойЧасти.ДополнительныеСведения = НаименованиеУслуги(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;	
	
	СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
	СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);
	
	// Расчет суммы
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	Иначе		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	КонецЕсли;
		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	
	Если Объект.СуммаВключаетНалоги Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
	КонецЕсли;	
	
	ОбновитьПодвалФормы();
КонецПроцедуры	

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ПлательщикНСП)
	
	// Счета учета
	СчетаУчетаНоменклатуры = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСчетаУчетаНоменклатуры(СтруктураДанные.Организация, СтруктураДанные.Номенклатура);
	СтруктураДанные.Вставить("СчетУчета", СчетаУчетаНоменклатуры.СчетУчета);
	СтруктураДанные.Вставить("СчетДоходов", СчетаУчетаНоменклатуры.СчетДоходов);
	СтруктураДанные.Вставить("СчетРасходов", СчетаУчетаНоменклатуры.СчетРасходов);
	СтруктураДанные.Вставить("СтатьяДоходов", СчетаУчетаНоменклатуры.СтатьяДоходов);
	СтруктураДанные.Вставить("СтатьяРасходов", СчетаУчетаНоменклатуры.СтатьяРасходов);
	
	// Ставка НСП.
	Если СтруктураДанные.Свойство("СтавкаНСП")
		И ЗначениеЗаполнено(СтруктураДанные.Номенклатура.СтавкаНСП) 
		И ПлательщикНСП Тогда 
		СтруктураДанные.СтавкаНСП = СтруктураДанные.Номенклатура.СтавкаНСП;
	КонецЕсли;	

	// Цены 
	СтруктураДанные.Вставить("ТипЦен", СтруктураДанные.Склад.ТипЦенРозничнойТорговли);
	Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтруктураДанные);
	// Цены документов
	Если Цена = 0 Тогда
		СтруктураДанные.Вставить("ЗначениеСтавкиНДС", УчетНДС.ПолучитьСтавкуНДС(СтруктураДанные.Дата, СтруктураДанные.СтавкаНДС));
		СтруктураДанные.Вставить("ЗначениеСтавкиНСП", УчетНДС.ПолучитьСтавкуНСП(СтруктураДанные.Дата, СтруктураДанные.Организация, СтруктураДанные.СтавкаНСП));
		СтруктураДанные.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		Цена = Ценообразование.ПолучитьЦенуПоДокументам(СтруктураДанные);
	КонецЕсли;	
	СтруктураДанные.Вставить("Цена", Цена);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()


// Получает наименование Услуги
//
&НаСервереБезКонтекста
Функция НаименованиеУслуги(Номенклатура)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаименованиеПолное");
КонецФункции 

&НаКлиенте
Процедура ВидСкидкиНаценкиПриИзменении(Элемент)
		// Заполнение счета учета отражения скидок
	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Объект.СчетУчетаСкидок = Неопределено;
		
		// Очистка скидок
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
			СтрокаТабличнойЧасти.ТоварыПроцентСкидкиНаценки = 0;		
			СтрокаТабличнойЧасти.СуммаСкидки = 0;		
		КонецЦикла;	
				
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СчетУчетаСкидок) Тогда  
		Объект.СчетУчетаСкидок = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВозвратПроданныхТоваровИСкидки");
	КонецЕсли;	
	
	СуммаСкидкиПоСтроке = Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке");
	ВидСкидкиПриИзмененииНаКлиенте();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзмененииНаКлиенте()
	
	ПараметрыРасчета = ПодготовитьПараметрыРасчета("Товары");
	
	ТекСтр = Элементы.Товары.ТекущаяСтрока;
	ТекДанные = Объект.Товары.НайтиПоИдентификатору(ТекСтр);

	Если НЕ ЗначениеЗаполнено(Объект.ВидСкидкиНаценки) Тогда 
		Объект.ПроцентСкидкиНаценки = 0;
	ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентОбщий") Тогда 
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл   
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;
             	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
	            ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
					
			Если Объект.СуммаВключаетНалоги Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Истина);
				
			Иначе
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
				
				// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
      		КонецЦикла;
	ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.ПроцентПоСтроке") Тогда 
		ТекДанные.ПроцентСкидкиНаценки = Объект.ПроцентСкидкиНаценки;  
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСкидкуСтрокиТабличнойЧасти(ТекДанные);
            ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ТекДанные, ПараметрыРасчета);
				
		Если Объект.СуммаВключаетНалоги Тогда
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ТекДанные, Истина);
			
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ТекДанные);
			
			// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ТекДанные, Ложь);
		КонецЕсли;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ТекДанные);
	ИначеЕсли Объект.ВидСкидкиНаценки = ПредопределенноеЗначение("Перечисление.ВидыСкидокНаценок.СуммаПоСтроке") Тогда 
		Объект.ПроцентСкидкиНаценки = 0;
		ТекДанные.ПроцентСкидкиНаценки = 0;  
		Объект.ПроцентСкидкиНаценки = 0; 
		Элементы.ТоварыПроцентСкидкиНаценки.Видимость = ЛОЖЬ; 
		Элементы.СуммаСкидкиПоСтроке.Видимость = Истина;   
		
		ТекДанные.СуммаСкидки = СуммаСкидкиПоСтроке;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(ТекДанные, ПараметрыРасчета);
				
		Если Объект.СуммаВключаетНалоги Тогда
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ТекДанные, Истина);
			
		Иначе
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(ТекДанные);
			
			// После расчета Всего и налогов переСчет доходов, чтобы исключить разницу в копейки.
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(ТекДанные, Ложь);
		КонецЕсли;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСкидкиСтрокиТабличнойЧасти(ТекДанные);
	КонецЕсли;
	
	ОбновитьПодвалФормы();	
КонецПроцедуры // ВидСкидкиПриИзмененииНаКлиенте()

&НаСервере
Функция ПолучитьОстаток(Номенклатура) 
	СписокСчетов = Новый СписокЗначений();
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("1610")); 
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("1640"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Колич
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СписокСчетов),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Товар
		|				И Субконто2 = &Склад) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.КоличествоОстатокДт";
	
	Запрос.УстановитьПараметр("КонецПериода", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("Товар", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ост = ВыборкаДетальныеЗаписи.Колич;
	КонецЦикла;
	
    Возврат  Ост;
КонецФункции

&НаСервере
Функция ПолучитьПрод(Номенклатура) 
	Ост = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СУММА(РозничнаяПродажаТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.РозничнаяПродажа.Товары КАК РозничнаяПродажаТовары
		|ГДЕ
		|	РозничнаяПродажаТовары.Ссылка.Дата >= &ДатаНач
		|	И РозничнаяПродажаТовары.Ссылка.Дата <= &ДатаКон
		|	И РозничнаяПродажаТовары.Ссылка.Проведен = ИСТИНА
		|	И РозничнаяПродажаТовары.Ссылка.Склад = &Склад
		|	И РозничнаяПродажаТовары.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ост = ?(ВыборкаДетальныеЗаписи.Количество=NULL,0,ВыборкаДетальныеЗаписи.Количество);
	КонецЦикла;
	
    Возврат  Ост;
КонецФункции



&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()	
	
				
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура();
	СтруктураНадписи.Вставить("УчетВалютныхОпераций", Истина);
	СтруктураНадписи.Вставить("ВалютаДокумента", 	  Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("ТипЦен", 			  Объект.Склад.ТипЦенРозничнойТорговли);
	СтруктураНадписи.Вставить("СтавкаНДС", 			  Объект.Товары[0].СтавкаНДС);
	СтруктураНадписи.Вставить("СуммаВключаетНалоги",  Объект.СуммаВключаетНалоги);
		

КонецПроцедуры 

&НаКлиенте
Процедура ПроцентСкидкиНаценкиПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СуммаОплатыПриИзменении(Элемент)
	СуммаСдача = СуммаОплаты - СуммаДокумента;    
	Объект.Дата = ТекущаяДата();      
	ИтогДата =  Объект.Дата;
	ИтогВремя = Объект.Дата;
КонецПроцедуры

&НаСервере
Процедура ОплатитьНаСервере()
	ДокРознПрод = Документы.РозничнаяПродажа.СоздатьДокумент();
    	ЗаполнитьЗначенияСвойств(ДокРознПрод, Объект); 
	Для каждого СтрокаТовОбъект из Объект.Товары Цикл
    		СтрокаТовДокРознПрод = ДокРознПрод.Товары.Добавить();     
       	ЗаполнитьЗначенияСвойств(СтрокаТовДокРознПрод, СтрокаТовОбъект); 
		СтрокаТовДокРознПрод.Всего = СтрокаТовОбъект.Всего - СтрокаТовОбъект.СуммаСкидки;
	КонецЦикла; 
	ДокРознПрод.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	ОплатитьНаСервере(); 
	ОчиститьВсе();
	КонецПроцедуры   

&НаСервере
Процедура ОчиститьВсе()
	 ОбрНов = Обработки.Рмк_Кассир.Создать();
	 Инд = 0;
	 //Для каждого СтрокаТовОбъект из Объект.Товары Цикл
	 Пока Объект.Товары.Количество() > 0 Цикл
		//Объект.Товары.Удалить(СтрокаТовОбъект);   
		Объект.Товары.Удалить(Инд);
		//Инд = Инд +1;
	КонецЦикла;
	Объект.Дата = Неопределено;
	Объект.ВидОперации = Перечисления.ВидыОперацийРозничнаяПродажа.Продажа;  
	Объект.СуммаВключаетНалоги = Истина;
	Объект.ВидСкидкиНаценки  = Неопределено;
	Объект.ПроцентСкидкиНаценки = Неопределено;
	Объект.Дата = ТекущаяДата();      
	ИтогДата =  Объект.Дата;
	ИтогВремя = Объект.Дата;
	ИтогВсего = Неопределено;
	ИтогСуммыСкидка = Неопределено;
	ИтогСуммаКОплате = Неопределено; 
	СуммаДокумента = Неопределено;
	СуммаОплаты = Неопределено;  
	СуммаСдача = Неопределено;
	ТекТовар = Неопределено;
	ТекКол = Неопределено;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
	Иначе
		ТекТовар =  "" + Элемент.ТекущиеДанные.Номенклатура;
		ТекКол     =  "" + Элемент.ТекущиеДанные.Количество + " Х " +  Элемент.ТекущиеДанные.Цена + " = " + Элемент.ТекущиеДанные.Всего;
		
		Если Элемент.ТекущиеДанные.ПроцентСкидкиНаценки = 0 И  Элемент.ТекущиеДанные.СуммаСкидки <> 0  Тогда
			Элементы.ТоварыПроцентСкидкиНаценки.Видимость = ЛОЖЬ; 
			Элементы.СуммаСкидкиПоСтроке.Видимость = Истина; 
			СуммаСкидкиПоСтроке = Элемент.ТекущиеДанные.СуммаСкидки; 
			ВидСкидкиНаценки = Неопределено;
		Иначе
			Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина; 
			Элементы.СуммаСкидкиПоСтроке.Видимость = ЛОЖЬ;
			ТоварыПроцентСкидкиНаценки  =  Элемент.ТекущиеДанные.ПроцентСкидкиНаценки;
			ВидСкидкиНаценки = Неопределено;
		КонецЕсли	;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)   
	
	ТекШтрихкод = "";
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", 
		ЭтотОбъект, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары")), ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));

	
	ОбновитьПодвалФормы();    
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
	Иначе
		ТекТовар =  "" + Элемент.ТекущиеДанные.Номенклатура;
		ТекКол     =  "" + Элемент.ТекущиеДанные.Количество + " Х " +  Элемент.ТекущиеДанные.Цена + " = " + Элемент.ТекущиеДанные.Всего;
		
		Если Элемент.ТекущиеДанные.ПроцентСкидкиНаценки = 0 И  Элемент.ТекущиеДанные.СуммаСкидки <> 0  Тогда
			Элементы.ТоварыПроцентСкидкиНаценки.Видимость = ЛОЖЬ; 
			Элементы.СуммаСкидкиПоСтроке.Видимость = Истина; 
			СуммаСкидкиПоСтроке = Элемент.ТекущиеДанные.СуммаСкидки; 
			ВидСкидкиНаценки = Неопределено;
		Иначе
			Элементы.ТоварыПроцентСкидкиНаценки.Видимость = Истина; 
			Элементы.СуммаСкидкиПоСтроке.Видимость = ЛОЖЬ;
			ТоварыПроцентСкидкиНаценки  =  Элемент.ТекущиеДанные.ПроцентСкидкиНаценки;
			ВидСкидкиНаценки = Неопределено;
		КонецЕсли	;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиПоСтрокеПриИзменении(Элемент)
	ВидСкидкиПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПодборНоменклатурыПроизведен" 
		И ТипЗнч(Параметр) = Тип("Структура")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор Тогда
		
		АдресЗапасовВХранилище = Параметр.АдресЗапасовВХранилище;
		ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, "Товары");
		
		ОбновитьПодвалФормы();
	Иначе 
		//ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Товары");
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Услуги");
	КонецЕсли;
	// Конец КопированиеСтрокТабличныхЧастей

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			// Преобразуем предварительно к ожидаемому формату.
			Если Параметр[1] = Неопределено Тогда
				ТекШтрихкод = Параметр[0]; // Достаем штрихкод из основных данных
			Иначе
				ТекШтрихкод = Параметр[1][1]; // Достаем штрихкод из дополнительных данных
			КонецЕсли;
			
			Если НЕ Элементы.Товары.ТекущиеДанные = Неопределено
				И Элементы.Товары.ТекущийЭлемент.Имя = "ТоварыКодМаркировки" Тогда
				
				ТекШтрихкод = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ТекШтрихкод, "");
					
				Если Объект.Товары.НайтиСтроки(Новый Структура("КодМаркировки", ТекШтрихкод)).Количество() > 0 Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Код маркировки %1 уже считан.'"), ТекШтрихкод);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					Возврат;	
				КонецЕсли;
				
				Элементы.Товары.ТекущиеДанные.КодМаркировки = ТекШтрихкод;	
			Иначе	
				//Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
					ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Товары"));
				//ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
				//	ПоискПоШтрихкодуЗавершение(ТекШтрихкод, Новый Структура("ТекШтрихкод, ИмяТабличнойЧасти", ТекШтрихкод, "Услуги"));
				//КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = КассовыеСменыКлиентБП.СобытиеВыполняетсяОперацияКассовойСмены() Тогда
		Доступность = Ложь;
	ИначеЕсли ИмяСобытия = КассовыеСменыКлиентБП.СобытиеЗавершиласьОперацияКассовойСмены() Тогда
		Доступность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьБаннеры_РозничнаяТорговля" Тогда
		Элементы.ГруппаБаннерОткрытьСмену.Видимость = ОтображатьБаннерОткрытияСмены(Объект.Ссылка, ИспользуетсяФискальныйРегистратор);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	

КонецПроцедуры

// Процедура - обработчик подбора товаров.
//
&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти)
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	СтавкаНСП = ?(ИмяТабличнойЧасти = "Товары", ДанныеУчетнойПолитики.СтавкаНСПРеализацииТовары, ДанныеУчетнойПолитики.СтавкаНСПРеализацииУслуги);
					
	ПараметрыРасчета = ПодготовитьПараметрыРасчета(ИмяТабличнойЧасти);					
					
	Для Каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаЗагрузки.Номенклатура, СтрокаЗагрузки.СчетУчета));
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;	
		
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаЗагрузки);
		
		СтруктураДанные = Новый Структура();
		СтруктураДанные.Вставить("Дата", ДатаДокумента);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		СтруктураДанные.Вставить("Склад", Объект.Склад);
		СтруктураДанные.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНалоги", Объект.СуммаВключаетНалоги);
		СтруктураДанные.Вставить("СтавкаНДС", СтавкаНДС);
		СтруктураДанные.Вставить("СтавкаНСП", СтавкаНСП);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("ТочностьЦены", Объект.ТочностьЦены);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные, ДанныеУчетнойПолитики.ПлательщикНСП);

		// Заполнение по данным номенклатуры
		// Цена переносится из подбора.
		СтрокаТабличнойЧасти.СчетДоходов = СтруктураДанные.СчетДоходов;
		СтрокаТабличнойЧасти.СчетСебестоимости = СтруктураДанные.СчетРасходов;
		СтрокаТабличнойЧасти.СтатьяДоходов = СтруктураДанные.СтатьяДоходов;
		СтрокаТабличнойЧасти.СтатьяРасходов = СтруктураДанные.СтатьяРасходов;
		
		СтрокаТабличнойЧасти.СтавкаНДС = СтруктураДанные.СтавкаНДС;
		СтрокаТабличнойЧасти.СтавкаНСП = СтруктураДанные.СтавкаНСП;

		// Маркировка
		Если ВестиУчетМаркировкиПродукции Тогда 
			ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
		КонецЕсли;	
		// Конец Маркировка
		
		// Расчет суммы
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе		
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Ложь);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		КонецЕсли;
			
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммыНалоговСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПараметрыРасчета);
		
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти);
		
		Если Объект.СуммаВключаетНалоги Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьДоходСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНалоги);
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // ПолучитьТоварыИзХранилища()


&НаСервереБезКонтекста
Функция ОтображатьБаннерОткрытияСмены(Ссылка, ИспользуетсяФискальныйРегистратор)
	
	Если Не ИспользуетсяФискальныйРегистратор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ТипыОборудования = МенеджерОборудованияКлиентСерверБП.ТипыКонтрольноКассовойТехники();
		СписокДоступныхУстройств = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(ТипыОборудования);
		Если СписокДоступныхУстройств.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого Устройство Из СписокДоступныхУстройств Цикл
			ОписаниеПоследнейСмены = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(Устройство.Ссылка);
			Если ОписаниеПоследнейСмены <> Неопределено
				И ОписаниеПоследнейСмены.Статус = Перечисления.СтатусыКассовойСмены.Открыта Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура КартинкаПО01БыстрыеТоварыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьПО01БыстрыеТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПО01БыстрыеТовары()
	
	//// &ЗамерПроизводительности
	//Замер = ОценкаПроизводительностиРТКлиент.НачатьЗамер(
	//	Ложь, "Обработка.РМКУправляемыйРежим.Форма.Форма.Команда.БыстрыеТоварыОткрытие");
	
	Если Объект.Товары.Количество() = 0 Тогда
		Объект.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	//Если ОткрытиеБыстрыхТоваровБезПанели Тогда
		ПараметрыФормы = Новый Структура;
		//ПараметрыФормы.Вставить("ПалитраБыстрыхТоваров", ПалитраБыстрыхТоваров);
		ПараметрыФормы.Вставить("НомерСтраницы", 1);
		//ПараметрыФормы.Вставить("ЗакрыватьБыстрыеТоварыПриВыбореТовара",
			//НаборПравИНастроек.ЗакрыватьБыстрыеТоварыПриВыбореТовара);
		
		Режим = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОткрытьФорму("Справочник.ПалитраБыстрыхТоваров.Форма.ФормаСтраницыБыстрыхТоваров",
			ПараметрыФормы, ЭтотОбъект,,,,, Режим);
	//Иначе
	//	ОткрытьЗакрытьМенюБыстрыхТоваров();
	//КонецЕсли;
	
	//ОценкаПроизводительностиРТКлиент.ЗакончитьЗамер(Замер);
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСтраницБыстрыеТоварыТовар(Команда)
	
	ИмяКоманды = Команда.Имя;
	НажатиеСтраница(ИмяКоманды)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаБыстрыеТоварыТовар(Команда)
	
	ИмяКоманды = Команда.Имя;
	ИмяКоманды = СтрЗаменить(ИмяКоманды, "ПрограммноКомандаБыстрыеТовары", "");
	
	НажатиеКнопка(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КартинкаСтраницБыстрыеТоварыШаблонНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НажатиеСтраница(Элемент.Имя)
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаБыстрыеТоварыШаблонНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИмяЭлемента = Элемент.Имя;
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента, "Программно", "");
	
	НажатиеКнопка(ИмяЭлемента);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьФорму()
	
	// Быстрые товары
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.ФайлКартинки КАК ФайлКартинки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.БыстрыйТовар = ИСТИНА";
	
	//Запрос.УстановитьПараметр("Ссылка", ПалитраБыстрыхТоваров);
	
	Результат = Запрос.Выполнить();
	ТаблицаЭлементовБыстрыхТоваров = Результат.Выгрузить();
	
	Элементы.СтраницаБыстрыхТоваровШаблон.Видимость   = Ложь;
	Элементы.СтраницаБыстрыхТоваровШаблон.Доступность = Ложь;
	
	// Шапка 
	МаксимальноеКоличествоКнопокВОдномРяду = 6;
	
	МаксимальноеКоличествоРядов = 6;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Родитель КАК Наименование,
	|	Номенклатура.ФайлКартинки КАК ФайлКартинки,
	|	Номенклатура.Родитель КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ПометкаУдаления = ЛОЖЬ
	|	И Номенклатура.БыстрыйТовар = ИСТИНА
	|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Родитель,
	|	Номенклатура.ФайлКартинки";
	
	//Запрос.УстановитьПараметр("Ссылка", ПалитраБыстрыхТоваров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Элементы.ГруппаСтраницБыстрыхТоваровРядШаблон.Видимость   = Ложь;
	Элементы.ГруппаСтраницБыстрыхТоваровРядШаблон.Доступность = Ложь;
	
	КоличествоСтраницБыстрыхТоваров = Выборка.Количество();
	КоличествоРядовСтраниц = Цел(КоличествоСтраницБыстрыхТоваров/МаксимальноеКоличествоКнопокВОдномРяду);
	
	Если КоличествоСтраницБыстрыхТоваров < 2 Тогда
		
		Элементы.ГруппаСтраницБыстрыхТоваров.Доступность = Ложь;
		Элементы.ГруппаСтраницБыстрыхТоваров.Видимость   = Ложь;
		
	КонецЕсли;
	
	Если Не Цел(КоличествоСтраницБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) = (КоличествоСтраницБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) Тогда
		КоличествоРядовСтраниц = КоличествоРядовСтраниц + 1;
	КонецЕсли;
	
	Элементы.ГруппаСтраницБыстрыхТоваров.Высота = Элементы.ГруппаСтраницБыстрыхТоваровРядШаблон.Высота * КоличествоРядовСтраниц;
	
	// Создать группы 
	Для Ряд = 1 По КоличествоРядовСтраниц Цикл
		ИмяЭлемента = "ПрограммноГруппаСтраницБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0");
		ЭлементРяд = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.ГруппаСтраницБыстрыхТоваров);
		ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЗаполнитьЗначенияСвойств(ЭлементРяд, Элементы.ГруппаСтраницБыстрыхТоваровРядШаблон, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
	КонецЦикла;
	
	// Заполнить кнопки и картинки.
	НомерСтрокиНастройкиСтраниц = 0;
	НомерСтрокиКартинокБыстрыхТоваров = 0;
	КартинкиБыстрыхТоваров.Очистить();
	КартинкиСтраницБыстрыхТоваров.Очистить();
	
	ПоследнийРяд = 0;
	
	НомерСтраницы = 0;
	Пока Выборка.Следующий() Цикл
		НомерСтраницы = НомерСтраницы + 1;
		// Кнопка страницы
		СтрокаКартинкиСтраницБыстрыхТоваров = КартинкиСтраницБыстрыхТоваров.Добавить();
		
		ИмяКнопки = "КнопкаСтраницаБыстрыхТоваров" + Формат(НомерСтраницы, "ЧН=0; ЧГ=0");
		НомерСтрокиНастройкиСтраниц = НомерСтрокиНастройкиСтраниц + 1;
		Ряд          = Цел((НомерСтрокиНастройкиСтраниц - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
		ПозицияВРяду = НомерСтрокиНастройкиСтраниц - МаксимальноеКоличествоКнопокВОдномРяду * Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду);
		ЗаголовокКнопки = Выборка.Наименование;
		
		ГруппаРядаСтраниц = Элементы["ПрограммноГруппаСтраницБыстрыхТоваровРяд"+Формат(Ряд,"ЧГ=0")];
		
		// Создать кнопку или картинку.
		ЭтоКартинка = Ложь;
		ФайлКартинки = Выборка.ФайлКартинки;
		Если Не ФайлКартинки.Пустая() Тогда
			ДанныеФайла = НавигационнаяСсылкаКартинки(ФайлКартинки, УникальныйИдентификатор);
			ФайлХранилище = ПолучитьИзВременногоХранилища(ДанныеФайла);
			
			Если НЕ ФайлХранилище = Неопределено Тогда
				Если ТипЗнч(ФайлХранилище) = Тип("ДвоичныеДанные") Тогда
					ЭтоКартинка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[Выборка.Клавиша], Выборка.АкселераторAlt, Выборка.АкселераторCtrl, Выборка.АкселераторShift);
		ИмяКоманды = "ПрограммноКомандаСтраницаБыстрыеТовары" + ИмяКнопки;
		КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "КомандаСтраницБыстрыеТоварыТовар";
		
		ИмяЭлемента = "Программно" + ИмяКнопки;
		ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРядаСтраниц);
		ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
		
		ЭлементПолеКартинка.ПутьКДанным = "КартинкиСтраницБыстрыхТоваров[" + Формат(НомерСтрокиНастройкиСтраниц - 1, "ЧН=0; ЧГ=0") + "].АдресКартинки";
		Если ЭтоКартинка Тогда
			СтрокаКартинкиСтраницБыстрыхТоваров.АдресКартинки = ДанныеФайла;
		Иначе
			ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, Элементы.КартинкаСтраницБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
		
		ЭлементПолеКартинка.УстановитьДействие("Нажатие", "Подключаемый_КартинкаСтраницБыстрыеТоварыШаблонНажатие");
		//ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
		
		//РозничныеПродажиСервер.ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, Выборка.Шрифт, Выборка.Цвет); 
		
		СтрокаТаблицы = ТаблицаНомеровСтраниц.Добавить();
		СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
		СтрокаТаблицы.НомерСтраницы = НомерСтраницы;
		
		// акселератор кнопки страницы
		ИмяЭлемента = ИмяКоманды + "Акселераторы";
		ЭлементКнопка = Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ГруппаПанельСтраницБыстрыхТоваров);
		ЭлементКнопка.Заголовок = ЗаголовокКнопки;
		
		Попытка
			ЭлементКнопка.ИмяКоманды = ИмяКоманды;
		Исключение
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		//ЭлементКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
		
		СтрокаТаблицы = ТаблицаНомеровСтраниц.Добавить();
		СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
		СтрокаТаблицы.НомерСтраницы = НомерСтраницы;
		
		СтрокаТаблицы = ТаблицаНомеровСтраниц.Добавить();
		СтрокаТаблицы.ИмяЭлемента = ИмяКоманды;
		СтрокаТаблицы.НомерСтраницы = НомерСтраницы;
		
		// Страница
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("СтраницаРазмещения", НомерСтраницы);
		
		МассивСтрокБыстрыхТоваров = ТаблицаЭлементовБыстрыхТоваров;
		
		ИмяЭлемента = "ПрограммноСтраницаБыстрыхТоваров" + Формат(НомерСтраницы,"ЧГ=0");
		ЭлементСтраница = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), Элементы.СтраницыБыстрыхТоваров);
		ЭлементСтраница.Вид = ВидГруппыФормы.Страница;
		ЗаполнитьЗначенияСвойств(ЭлементСтраница, Элементы.СтраницаБыстрыхТоваровШаблон, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
		ЭлементСтраница.Высота = Элементы.СтраницаБыстрыхТоваровШаблон.Высота * МаксимальноеКоличествоРядов;
		
		КоличествоБыстрыхТоваров = МассивСтрокБыстрыхТоваров.Количество();
		
		// Рассчитать высоту страницы
		КоличествоРядовКнопок = Цел(КоличествоБыстрыхТоваров/МаксимальноеКоличествоКнопокВОдномРяду);
		
		Если Не Цел(КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) = (КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) Тогда
			КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
		КонецЕсли;
		
		// Создать группы 
		Для Ряд = 1 По КоличествоРядовКнопок + 1 Цикл
			ИмяЭлемента = "ПрограммноГруппаБыстрыхТоваровРяд" + Формат(НомерСтраницы, "ЧН=0; ЧГ=0") + "_" + Формат(Ряд,"ЧГ=0");
			ЭлементРяд = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), ЭлементСтраница);
			ЭлементРяд.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЗаполнитьЗначенияСвойств(ЭлементРяд, Элементы.ГруппаБыстрыхТоваровРядШаблон, , "Имя, Заголовок, ПутьКДаннымЗаголовка, Видимость, Доступность");
		КонецЦикла;
		
		НомерСтрокиНастройки = 0;
		
		Для каждого СтрокаБыстрыхТоваров Из МассивСтрокБыстрыхТоваров Цикл
			
			СтрокаКартинкиБыстрыхТоваров = КартинкиБыстрыхТоваров.Добавить();
			НомерСтрокиНастройки = НомерСтрокиНастройки + 1;

			ИмяКнопки = "БыстрыйТовар" + Формат(НомерСтраницы, "ЧН=0; ЧГ=0") + "_" + Формат(НомерСтрокиНастройки, "ЧН=0; ЧГ=0");
			НомерСтрокиКартинокБыстрыхТоваров = НомерСтрокиКартинокБыстрыхТоваров + 1;
			Ряд          = Цел((НомерСтрокиНастройки - 1) / МаксимальноеКоличествоКнопокВОдномРяду) + 1;
			ПозицияВРяду = НомерСтрокиНастройки - МаксимальноеКоличествоКнопокВОдномРяду * Цел((МаксимальноеКоличествоКнопокВОдномРяду * Ряд-1)/МаксимальноеКоличествоКнопокВОдномРяду);
			ЗаголовокКнопки = СтрокаБыстрыхТоваров.Наименование;
			
			ГруппаРяда = Элементы["ПрограммноГруппаБыстрыхТоваровРяд" + Формат(НомерСтраницы, "ЧН=0; ЧГ=0") + "_" + Формат(Ряд,"ЧГ=0")];
			
			// Создать кнопку или картинку.
			ЭтоКартинка = Ложь;
			ФайлКартинки = СтрокаБыстрыхТоваров.ФайлКартинки;
			Если Не ФайлКартинки.Пустая() Тогда
				ДанныеФайла = НавигационнаяСсылкаКартинки(ФайлКартинки, УникальныйИдентификатор);
				ФайлХранилище = ПолучитьИзВременногоХранилища(ДанныеФайла);
				
				Если НЕ ФайлХранилище = Неопределено Тогда
					Если ТипЗнч(ФайлХранилище) = Тип("ДвоичныеДанные") Тогда
						ЭтоКартинка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаБыстрыхТоваров.Клавиша], СтрокаБыстрыхТоваров.АкселераторAlt, СтрокаБыстрыхТоваров.АкселераторCtrl, СтрокаБыстрыхТоваров.АкселераторShift);
			
			ИмяКоманды = "ПрограммноКомандаБыстрыеТовары" + ИмяКнопки;
			КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
			КомандаФормы.Действие = "КомандаБыстрыеТоварыТовар";
			
			ИмяЭлемента = "Программно" + ИмяКнопки;
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРяда);
			ЭлементПолеКартинка.Вид = ВидПоляФормы.ПолеКартинки;
			
			ЭлементПолеКартинка.ПутьКДанным = "КартинкиБыстрыхТоваров[" + Формат(НомерСтрокиКартинокБыстрыхТоваров - 1, "ЧН=0; ЧГ=0") + "].АдресКартинки";
			Если ЭтоКартинка Тогда
				СтрокаКартинкиБыстрыхТоваров.АдресКартинки = ДанныеФайла;
			Иначе
				ЭлементПолеКартинка.ТекстНевыбраннойКартинки = ЗаголовокКнопки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, Элементы.КартинкаБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки");
			
			ЭлементПолеКартинка.УстановитьДействие("Нажатие", "КартинкаБыстрыеТоварыШаблонНажатие");
			//ЭлементПолеКартинка.СочетаниеКлавиш =  СочетаниеКлавиш;
			
			//РозничныеПродажиСервер.ЗаполнитьШрифтЦвет(ЭлементПолеКартинка, СтрокаБыстрыхТоваров.Шрифт, СтрокаБыстрыхТоваров.Цвет); 
			
			ИмяЭлемента = ИмяКоманды + "Акселераторы";
			ЭлементКнопка = Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ГруппаПанельБыстрыхТоваров);
			ЭлементКнопка.Заголовок = ЗаголовокКнопки;
			
			Попытка
				ЭлементКнопка.ИмяКоманды = ИмяКоманды;
			Исключение
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			//ЭлементКнопка.СочетаниеКлавиш = СочетаниеКлавиш;
			
			СтрокаТаблицыБыстрыхТоваров = ТаблицаБыстрыхТоваров.Добавить();
			СтрокаТаблицыБыстрыхТоваров.ИдентификаторБыстрогоТовара = ИмяКнопки;
			СтрокаТаблицыБыстрыхТоваров.Номенклатура                = СтрокаБыстрыхТоваров.Номенклатура;
			
		КонецЦикла;
		
		
		// До заполнение пустой картинкой.
		Если КоличествоРядовКнопок > 1 Тогда
			ВыводимыйОстаток = КоличествоРядовКнопок * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоБыстрыхТоваров;
			
			Для Индекс = 1 По ВыводимыйОстаток Цикл
				ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(НомерСтраницы, "ЧН=0; ЧГ=0") + "_" + Формат(Индекс,"ЧГ=0");
				ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"),ГруппаРяда);
				ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
				ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
				ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, Элементы.КартинкаСтраницПустаяБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
			КонецЦикла;
		КонецЕсли;
		
		ПоследнийРяд = НомерСтраницы;
	КонецЦикла;
	
	// До заполнение пустой картинкой.
	Если КоличествоРядовСтраниц > 1 Тогда
		ПоследнийРяд = ПоследнийРяд + 1;
		ВыводимыйОстаток = КоличествоРядовСтраниц * МаксимальноеКоличествоКнопокВОдномРяду - КоличествоСтраницБыстрыхТоваров;
		
		Для Индекс = 1 По ВыводимыйОстаток Цикл
			ИмяЭлемента = "ПрограммноПустаяКартинкаБыстрыхТоваров" + Формат(ПоследнийРяд, "ЧН=0; ЧГ=0") + "_" + Формат(Индекс,"ЧГ=0");
			ЭлементПолеКартинка = Элементы.Вставить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаРядаСтраниц);
			ЭлементПолеКартинка.ПутьКДанным = "КартинкаШаблон";
			ЭлементПолеКартинка.Вид         = ВидПоляФормы.ПолеКартинки;
			ЗаполнитьЗначенияСвойств(ЭлементПолеКартинка, Элементы.КартинкаПустаяБыстрыеТоварыШаблон,, "Имя, Заголовок, Видимость, ПутьКДанным, ТекстНевыбраннойКартинки");
		КонецЦикла;
	КонецЕсли;
	
	УстановитьТекущуюСтраницу(НомерСтраницы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаКлиенте
Процедура НажатиеКнопка(ИдентификаторБыстрогоТовара)
	
	МассивСтрок = ТаблицаБыстрыхТоваров.НайтиСтроки(Новый Структура("ИдентификаторБыстрогоТовара", ИдентификаторБыстрогоТовара));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаБыстрыхТоваров = МассивСтрок[0];
		
		ВыбранноеЗначение = Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(ВыбранноеЗначение, СтрокаБыстрыхТоваров);
		СтрНоменклатура = Новый Структура("Номенклатура",СтрокаБыстрыхТоваров.Номенклатура);
			НайденнаяСтрока = Объект["Товары"].НайтиСтроки(СтрНоменклатура);
			Если НайденнаяСтрока = Неопределено Тогда    
			ИначеЕсли НайденнаяСтрока.Количество() = 0 Тогда
				
				СтрокаТабличнойЧасти = Объект["Товары"].Добавить();
				СтрокаТабличнойЧасти.Номенклатура = СтрокаБыстрыхТоваров.Номенклатура;
				СтрокаТабличнойЧасти.Количество = 1;
					Если ВестиУчетМаркировкиПродукции Тогда 
						ЗаполнитьИндексМарки(СтрокаТабличнойЧасти);
					КонецЕсли;	
			Иначе
				СтрокаТабличнойЧасти  = Объект["Товары"].Получить(НайденнаяСтрока[0].НомерСтроки-1);
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
			КонецЕсли; 
			ОбработатьИзменениеНоменклатуры(СтрокаТабличнойЧасти, "Товары");

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МаксимальноеКоличествоРядов(МаксимальноеКоличествоКнопокВОдномРяду)

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтраницы,
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтроки) КАК КоличествоЭлементов
	//|ПОМЕСТИТЬ ТаблицаКоличествоЭлементов
	//|ИЗ
	//|	Справочник.ПалитраБыстрыхТоваров.БыстрыеТовары КАК ПалитраБыстрыхТоваровБыстрыеТовары
	//|ГДЕ
	//|	ПалитраБыстрыхТоваровБыстрыеТовары.Ссылка = &Ссылка
	//|	И ПалитраБыстрыхТоваровБыстрыеТовары.ЭтоСтраница <> 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ПалитраБыстрыхТоваровБыстрыеТовары.НомерСтраницы
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ТаблицаКоличествоЭлементов.НомерСтраницы,
	//|	ТаблицаКоличествоЭлементов.КоличествоЭлементов КАК КоличествоЭлементов
	//|ИЗ
	//|	ТаблицаКоличествоЭлементов КАК ТаблицаКоличествоЭлементов
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	КоличествоЭлементов УБЫВ";
	//
	//Запрос.УстановитьПараметр("Ссылка", ПалитраБыстрыхТоваров);
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	КоличествоБыстрыхТоваров = Выборка.КоличествоЭлементов
	//Иначе
	//	КоличествоБыстрыхТоваров = 1
	//КонецЕсли;
	//
	//КоличествоРядовКнопок = Цел(КоличествоБыстрыхТоваров/МаксимальноеКоличествоКнопокВОдномРяду);
	//
	//Если Не Цел(КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) = (КоличествоБыстрыхТоваров / МаксимальноеКоличествоКнопокВОдномРяду) Тогда
	//	КоличествоРядовКнопок = КоличествоРядовКнопок + 1;
	//КонецЕсли;
	//
	//Возврат КоличествоРядовКнопок;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницу(НомерТекущейСтраницы)
	
	ОграничениеЗаполнения = "Имя, Заголовок, Видимость, Доступность, ПутьКДанным, ТекстНевыбраннойКартинки";
	Для каждого ПодчиненныйЭлементРяд Из Элементы.ГруппаСтраницБыстрыхТоваров.ПодчиненныеЭлементы Цикл
		Если НЕ ПодчиненныйЭлементРяд = Элементы.ГруппаСтраницБыстрыхТоваровРядШаблон Тогда
			Для каждого ПодчиненныйЭлемент Из ПодчиненныйЭлементРяд.ПодчиненныеЭлементы Цикл
				ИмяЭлемента = ПодчиненныйЭлемент.Имя;
				Если Найти(ИмяЭлемента, "ПрограммноПустаяКартинкаБыстрыхТоваров") = 0 Тогда
					ЗаполнитьЗначенияСвойств(ПодчиненныйЭлемент, Элементы.КартинкаСтраницБыстрыеТоварыШаблон,, ОграничениеЗаполнения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементКнопкаСтраница = Элементы.Найти("ПрограммноКнопкаСтраницаБыстрыхТоваров" + Формат(НомерТекущейСтраницы, "ЧН=0; ЧГ=0"));
	ЗаполнитьЗначенияСвойств(ЭлементКнопкаСтраница, Элементы.ВыделеннаяКартинкаСтраницБыстрыеТоварыШаблон,, ОграничениеЗаполнения);
	
	//Элементы.ДекорацияЗаголовок.Заголовок = ЭлементКнопкаСтраница.ТекстНевыбраннойКартинки;
	
	ЭлементСтраница = Элементы.Найти("ПрограммноСтраницаБыстрыхТоваров" + Формат(НомерТекущейСтраницы,"ЧГ=0"));
	Элементы.СтраницыБыстрыхТоваров.ТекущаяСтраница = ЭлементСтраница;
	
	НомерСтраницы = НомерТекущейСтраницы;
КонецПроцедуры

&НаСервере
Процедура НажатиеСтраница(ИмяЭлемента)
	
	//СтруктураПоиска = Новый Структура;
	//СтруктураПоиска.Вставить("ИмяЭлемента",ИмяЭлемента);
	//
	//МассивСтрок = ТаблицаНомеровСтраниц.НайтиСтроки(СтруктураПоиска);
	//НомерТекущейСтраницы = МассивСтрок[0].НомерСтраницы;
	//
	//Если НЕ НомерТекущейСтраницы = НомерСтраницы Тогда
	//	УстановитьТекущуюСтраницу(НомерТекущейСтраницы);
	//КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ТекТовар =  "";
	ТекКол     =  "";  
	СуммаСдача = 0;
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФокусПринято(Команда)
	ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы.СуммаОплаты;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Сообщить("Тест");
КонецПроцедуры

#КонецОбласти

